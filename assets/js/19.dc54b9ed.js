(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{594:function(e,t,l){"use strict";l.r(t);var o=l(66),M=Object(o.a)({},function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h2",{attrs:{id:"mvc"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#mvc","aria-hidden":"true"}},[e._v("#")]),e._v(" MVC")]),e._v(" "),l("p",[e._v("MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写")]),e._v(" "),l("p",[e._v("M: 您可以简单的认为它是一个数据模型,它里面放置了我的各种数据,一般这些数据我们都是通过后台获取到的,Model的作用主要在于对数据的存放以及获取")]),e._v(" "),l("p",[e._v("V: 您可以认为它就是我们页面看到的效果,而部分显示的数据是通过Model中获取的")]),e._v(" "),l("p",[e._v("C: 您可以理解为它是个中间人,控制器,它主要的作用在于,把我model的数据,解析之后给到view,也可以把view相应的数据给到Model")]),e._v(" "),l("h2",{attrs:{id:"mvvm"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#mvvm","aria-hidden":"true"}},[e._v("#")]),e._v(" MVVM")]),e._v(" "),l("p",[e._v("MVVM即Model-View-ViewModel的简写。即模型-视图-视图模型。")]),e._v(" "),l("p",[e._v("其实MVVM的M和V都跟MVC一样,区别就在于C和VM,相比以往我们处理的数据结构越来越复杂,如果仅仅交给C来进行处理的话,会显得非常臃肿,而且C设计出来的时候,其实并不是用来进行数据解析的,所以我们就创建了一个对象来专门解析我复杂的数据,而这个对象,就是VM,它就是ViewModel,ViewModel它专门解析Model的数据,通过数据绑定的方式将数据转换成view,通过DOM事件监听对我的View进行监视,将View转换成Model,那么ViewModel就是MVVM的核心,它是实现我Model和View通信桥梁,我们称其为双向绑定,而Vue就是基于这种模式写的框架,可以理解为Vue就是充当ViewModel这个角色存在的,让开发者仅仅只是操作数据,我的页面就会得到相应的更新,数据也会得到相应的改变,这样开发起来更加简单方便,这也是MVVM的核心所在,相比MVC使开发效果高效、结构清晰！")])])},[],!1,null,null,null);t.default=M.exports}}]);